apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-store-api
  namespace: movie-store
  labels:
    app: movie-store-api
    component: api
    app.kubernetes.io/name: movie-store-api
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: movie-store-platform
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: movie-store-api
  template:
    metadata:
      labels:
        app: movie-store-api
        component: api
        app.kubernetes.io/name: movie-store-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: movie-store-platform
    spec:
      serviceAccountName: api-service
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      containers:
      - name: api
        image: movie-api-service:latest
        imagePullPolicy: Always
        
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: movie-store-config
        
        # Environment variables from Secrets
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DB_HOST
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: DB_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_HOST
        # Elasticsearch removed - using PostgreSQL for all queries
        
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Container security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Temporary filesystem for logs
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - movie-store-api
              topologyKey: kubernetes.io/hostname
      
      # Graceful termination
      terminationGracePeriodSeconds: 30
